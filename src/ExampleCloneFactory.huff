#include "./HuffCloneLib.huff"

#define constant IMPL = FREE_STORAGE_POINTER()

/// @notice Creates an `ExampleClone` contract
#define macro CREATE_CLONE() = takes (0) returns (0) {
    0x64 calldataload  // [uint8]
    0x44 calldataload  // [uint64, uint8]
    0x24 calldataload  // [uint256, uint64, uint8]
    0x04 calldataload  // [address, uint256, uint64, uint8]

    // data len = 61 (0x3D)
    0x3D 0x300 mstore // [address, uint256, uint64, uint8]

    // Store address << 0x60 @ 0x320
    0x60 shl           // [address << 0x60, uint256, uint64, uint8]
    0x320 mstore      // [uint256, uint64, uint8]

    // Store uint256 @ 0x334
    0x334 mstore      // [uint64, uint8]

    // Store uint64 << 0xC0 @ 0x354
    0xC0 shl           // [uint64 << 0xC0, uint8]
    0x354 mstore      // [uint8]

    // Store uint8 << 0xF8 @ 0x35C
    0xF8 shl           // [uint8 << 0xF8]
    0x35C mstore      // []

    0x300             // [data_ptr]
    [IMPL] sload       // [impl_addr, data_ptr]

    CLONE()            // [instance]
    0x00 mstore        // []
    0x20 0x00 return
}

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr
    dup1 0x684fbe55 eq clone jumpi

    clone:
        CREATE_CLONE()
}

#define macro CONSTRUCTOR() = takes (0) returns (0) {
    0x20                // [size] - byte size to copy
    0x20 codesize sub   // [offset, size] - offset in the code to copy from
    0x00                // [mem, offset, size] - offset in memory to copy to
    codecopy            // []

    0x00 mload
    [IMPL]              // [impl_ptr, impl_addr]
    sstore              // []
}