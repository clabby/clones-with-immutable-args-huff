#define macro CLONE() = takes(2) returns (1) {
    // Input Stack: [impl_addr, data]
    dup2 mload   // [data_len, impl_addr, data]  
    0x02 add     // [0x02 + data_len, impl_addr, data]
    0x00 mstore  // [impl_addr, data]

    0x41         // [0x41, impl_addr, data]
    0x00 mload   // [extra_length, 0x41, impl_addr, data]
    add          // [0x41 + 0x02 + data_len, 0x41, impl_addr, data]
    0x20 mstore  // [impl_addr, data]

    0x0A         // [0x0A, impl_addr, data]
    0x20 mload   // [run_size, 0x0A, impl_addr, data]
    sub          // [run_size - 0x0A, impl_addr, data]
    0x40 mstore  // [impl_addr, data]

    0x6100000000000000000000000000000000000000000000000000000000000000
    0x60         // [0x60, 0x61..., impl_addr, data]
    mstore       // [impl_addr, data]

    0x20 mload   // [run_size, impl_addr, data]
    0xF0 shl     // [run_size << 0xF0, impl_addr, data]
    0x61 mstore  // [impl_addr, data]

    0x3d81600a3d39f33d3d3d3d363d3d376100000000000000000000000000000000
    0x63 mstore  // [impl_addr, data]

    0x00 mload   // [extra_length, impl_addr, data]
    0xF0 shl     // [extra_length << F0, impl_addr, data]
    0x73 mstore  // [impl_addr, data]

    0x6037363936610000000000000000000000000000000000000000000000000000
    0x75 mstore  // [impl_addr, data]

    0x00 mload   // [extra_length, impl_addr, data]
    0xF0 shl     // [extra_length << F0, impl_addr, data]
    0x7B mstore  // [impl_addr, data]

    0x013d730000000000000000000000000000000000000000000000000000000000
    0x7D mstore  // [impl_addr, data]

    dup1         // [impl_addr, impl_addr, data]
    0x60 shl     // [impl_addr << 0x60, impl_addr, data]
    0x80 mstore  // [impl_addr, data]

    0x5af43d3d93803e603557fd5bf300000000000000000000000000000000000000
    0x94 mstore  // [impl_addr, data]

    0x02         // [0x02, impl_addr, data]
    0x00 mload   // [extra_length, 0x02, impl_addr, data]
    sub          // [extra_length - 0x02, impl_addr, data]
    dup1         // [extra_length, extra_length, impl_addr, data]
    0x00 mstore  // [extra_length, impl_addr, data]

    0x200 mstore // [impl_addr, data]

    // TODO...
}

#define macro CLONE_WRAPPER() = takes (0) returns (0) {
    0x24 calldataload // [data]
    0x04 calldataload // [impl_addr, data]
    CLONE()           // [address]
    0x00 mstore       // []
    0x20 0x00 return
}

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr
    dup1 0xa9059cbb eq clone jumpi

    clone:
        CLONE_WRAPPER()
}