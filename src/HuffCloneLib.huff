/// @notice Creates a clone proxy of the implementation contract, with immutable args
/// @dev data cannot exceed 65535 bytes, since 2 bytes are used to store the data length
/// @param err The jumpdest to jump to if an error occurs
/// @param impl_addr The address of the implementation contract to clone
/// @param data_ptr Pointer to beginning of encoded immutable args in memory
/// @return instance The address of the created clone
#define macro CLONE(err) = takes(2) returns (1) {
    // Memory Locations
    // 0x00 - extra_length
    // 0x20 - creation_size
    // 0x40 - run_size
    // 0x60 - ptr

    // Input Stack: [impl_addr, data_ptr]
    dup2 mload   // [data_len, impl_addr, data_ptr]
    0x02 add     // [0x02 + data_len, impl_addr, data_ptr]
    0x00 mstore  // [impl_addr, data_ptr]

    0x41         // [0x41, impl_addr, data_ptr]
    0x00 mload   // [extra_length, 0x41, impl_addr, data_ptr]
    add          // [extra_length + 0x41, impl_addr, data_ptr]
    0x20 mstore  // [impl_addr, data_ptr]

    0x0A         // [0x0A, impl_addr, data_ptr]
    0x20 mload   // [creation_size, 0x0A, impl_addr, data_ptr]
    sub          // [creation_size - 0x0A, impl_addr, data_ptr]
    0x40 mstore  // [impl_addr, data_ptr]

    0x6100000000000000000000000000000000000000000000000000000000000000
    0x60 mstore  // [impl_addr, data_ptr]

    0x20 mload   // [run_size, impl_addr, data_ptr]
    0xF0 shl     // [run_size << 0xF0, impl_addr, data_ptr]
    0x61 mstore  // [impl_addr, data_ptr]

    0x3d81600a3d39f33d3d3d3d363d3d376100000000000000000000000000000000
    0x63 mstore  // [impl_addr, data_ptr]

    0x00 mload   // [extra_length, impl_addr, data_ptr]
    0xF0 shl     // [extra_length << F0, impl_addr, data_ptr]
    0x73 mstore  // [impl_addr, data_ptr]

    0x6037363936610000000000000000000000000000000000000000000000000000
    0x75 mstore  // [impl_addr, data_ptr]

    0x00 mload   // [extra_length, impl_addr, data_ptr]
    0xF0 shl     // [extra_length << F0, impl_addr, data_ptr]
    0x7B mstore  // [impl_addr, data_ptr]

    0x013d730000000000000000000000000000000000000000000000000000000000
    0x7D mstore  // [impl_addr, data_ptr]

    dup1         // [impl_addr, impl_addr, data_ptr]
    0x60 shl     // [impl_addr << 0x60, impl_addr, data_ptr]
    0x80 mstore  // [impl_addr, data_ptr]

    0x5af43d3d93803e603557fd5bf300000000000000000000000000000000000000
    0x94 mstore  // [impl_addr, data_ptr]

    // -------------
    // Appended data
    // -------------

    // Memory Locations:
    // 0x200 - counter
    // 0x220 - data_ptr
    // 0x240 - copy_ptr

    0x02         // [0x02, impl_addr, data_ptr]
    0x00 mload   // [extra_length, 0x02, impl_addr, data_ptr]
    sub          // [extra_length - 0x02, impl_addr, data_ptr]
    dup1         // [extra_length, extra_length, impl_addr, data_ptr]
    0x00 mstore  // [extra_length, impl_addr, data_ptr]

    0x200 mstore // [impl_addr, data_ptr]
    dup2         // [data_ptr, impl_addr, data_ptr]
    0x20 add     // [data_ptr + 0x20, impl_addr, data_ptr]
    0x220 mstore // [impl_addr, data_ptr]
    
    0xA1         // [0xA1, impl_addr, data_ptr]
    0x240 mstore // [impl_addr, data_ptr]

    loop_body:
        0x200 mload  // [counter, impl_addr, data_ptr]
        dup1         // [counter, counter, impl_addr, data_ptr]
        0x20 swap1   // [counter, 0x20, counter, impl_addr, data_ptr]
        lt           // [counter < 0x20, counter, impl_addr, data_ptr]
        continue jumpi // Exit loop if counter < 0x20

        0x220 mload  // [data_ptr, counter, impl_addr, data_ptr]
        mload        // [data, counter, impl_addr, data_ptr]
        0x240 mload  // [copy_ptr, data, counter, impl_addr, data_ptr]
        mstore       // [counter, impl_addr, data_ptr]

        0x240 mload  // [copy_ptr, counter, impl_addr, data_ptr]
        0x20 add     // [copy_ptr + 0x20, counter, impl_addr, data_ptr]
        0x240 mstore

        0x220 mload  // [data_ptr, counter, impl_addr, data_ptr]
        0x20 add     // [data_ptr + 0x20, counter, impl_addr, data_ptr]
        0x220 mstore // [counter, impl_addr, data_ptr]

        0x20 swap1   // [counter, 0x20, impl_addr, data_ptr]
        sub          // [counter - 0x20, impl_addr, data_ptr]
        0x200 mstore // [impl_addr, data_ptr]
        0x01 loop_body jumpi // Continue loop
    continue:
        // Make mask
        0x01         // [0x01, impl_addr, data_ptr]
        0x200 mload  // [counter, 0x01, impl_addr, data_ptr]
        0x20 sub     // [counter - 0x20, 0x01, impl_addr, data_ptr]
        0x100 exp    // [0x100 ** (counter - 0x20), 0x01, impl_addr, data_ptr]
        sub          // [0x100 ** (counter - 0x20) - 0x01, impl_addr, data_ptr]
        not          // [~(0x100 ** (counter - 0x20) - 0x01), impl_addr, data_ptr]

        0x220 mload  // [data_ptr, ~(0x100 ** (counter - 0x20) - 0x01), impl_addr, data_ptr]
        mload        // [data, ~(0x100 ** (counter - 0x20) - 0x01), impl_addr, data_ptr]
        and          // [data & ~(0x100 ** (counter - 0x20) - 0x01), impl_addr, data_ptr]

        0x240 mload  // [copy_ptr, data & ~(0x100 ** (counter - 0x20) - 0x01), impl_addr, data_ptr]
        mstore       // [impl_addr, data_ptr]

        0x00 mload   // [extra_length, impl_addr, data_ptr]
        0xF0 shl     // [extra_length << 0xF0, impl_addr, data_ptr]

        0x240 mload  // [copy_ptr, extra_length << 0xF0, impl_addr, data_ptr]
        0x200 mload  // [counter, copy_ptr, extra_length << 0xF0, impl_addr, data_ptr]
        add          // [counter + copy_ptr, extra_length << 0xF0, impl_addr, data_ptr]
        mstore       // [impl_addr, data_ptr]

        pop pop      // []

        0x20 mload   // [creation_size]
        0x60 0x00    // [0x00, 0x60, creation_size]
        create       // [instance]

        dup1 iszero  // [instance == 0, instance]
        <err> jumpi  // [instance] - Revert if instance is zero
}